grid = [
    ["H", "H", "P"],
    ["H", "C", "C"],
    ["H", "H","P"]
]


def count_adjacent_h(grid):
    rows = len(grid)
    cols = len(grid[0])
    count = 0

    for row in range(rows):
        for col in range(cols):
            if col < cols - 1 and grid[row][col] == "C" and grid[row][col + 1] == "C":
                count += -5
                print(f"{count}, c/c col" )
                if col < cols - 1 and (grid[row][col] == "H" or grid[row][col] == "C") and (grid[row][col + 1] == "H" or grid[row][col + 1] == "C") :
                    count += -1
                    print(f"{count}, c/h/h col")
            if row < rows - 1 and grid[row][col] == "C" and grid[row + 1][col] == "C":
                count += -5
                print(f"{count}, c/c row")        
                if row < rows - 1 and (grid[row][col] == "H" or grid[row][col] == "C") and (grid[row + 1][col] == "H" or grid[row + 1][col] == "C"):
                    count += -1
                    print(f"{count}, c/h/h row")    
    return count


def two_strings_fold(protein_sequence):
    sequence_list = []
    protein_length = len(protein_sequence)
    for i in range(protein_length):
        if i < (protein_length / 2):
            sequence_list.append(1)
        elif i == (protein_length / 2):
            sequence_list.append(2)
        else:
            sequence_list.append(-1)
    return sequence_list

if __name__ == "__main__":
    Protein = "HHPHHHPH"
    sequence = two_strings_fold(Protein)
    for i in range(len(Protein)):
        print(f"{Protein[i], sequence[i]}")
    print(count_adjacent_h(grid))
    